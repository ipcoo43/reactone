[ class로 임의의 집합 문제 무한 생성기 만들기 ]

import numpy as np

class Sets():  # 집합의 class인 Sets를 정의
  def question(self):
    self.select = np.random.randint(3) # 0이면 교집합, 1이면 합집합, 2이면 차집합을 계산하는 
	                                   # 0,1,2중 하나의 숫자를 랜덤을 발생
    n_a = np.random.randint(10) # list a의 갯수를 0~9 중 하나의 숫자 랜덤 발생
	n_b = np.random.randint(10) # list b의 갯수를 0~9 중 하나의 숫자 랜덤 발생
	self.a = []
	self.b = []
	for i in np.arange(n_a): # 중복되지 않는 n_a 객수를 가진 집합 a를 생성
	  temp = np.random.randint(10) # list temp의 갯수를 0~9 중 하나의 숫자 랜덤 발생
	  if temp not in self.a: # temp가 self.a에 없다면
	    self.a.append(temp)  # self.a에 temp를 추가하라
	
	for i in np.arange(n_b): # 중복되지 않는 n_b 갯수를 가진 집합 b를 생성
	  temp = np.random.randint(10) # list temp의 갯수를 0~9 중 하나의 숫자 랜덤 발생
	  if temp not in self.b: # temp가 self.b에 없다면
	    self.b.append(temp)  # self.b에 temp를 추가하라
	
	print('a : [{}]'.format(','.join(map(str,self.a))))
	print('b : [{}]'.format(','.join(map(str,self.b))))

	if self.select == 0:
	  print('a,b가 위와 같고 두 집합의 교집합을 구하시오')
	elif self.selct == 1:
	  print('a,b가 위와 같고 두 집합의 합집합을 구하시오')
	elif self.select == 2:
	  print('a,b가 위와 같고 차집합 a-b를 구하시오')

  def setdata(self,a,b):
    self.a = a
	self.b = b

  def union(self):
    result = self.b + []
	for i in self.a:
	  if i in self.b:
	    result.append(i)
	return result
  
  def intersection(self):
    result = []
	for i in self.a:
	  if i in self.b:
	    result.append(i)
	reuturn result

  def complemnet(self):
    result self.a + []
	for i in self.b:
	  if i in self.a:
	    result.remove(i)
	return result

  def answer(self):
    if self.select == 0:
	  result = self.intersection()
	  result.sort()
	  print(result)
	elif self.select == 1:
	  result = self.union()
	  result.sort()
	  print(result)
	elif self.select == 2:
	  result = self.complement()
	  result.sort()
	  print(result)

q1 = Sets()
q1.question()
 # a: [5,8,2,3,7,6]
 # b: [3,2]
 # a, b가 위와 같고 두 집합의 교집합을 구하시오
q1.answer()
 # [2,3]