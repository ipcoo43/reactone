# 유클리드 
# a,b의 최대공약수는 b와 a를 b로 나눈 나머지의 최대공약수와 같다
# gcd(a,b) = gcd(b, a%b)
# 어떤 수와 0의 최대공약수는 자기 자신 이다. gcd(n,0) = n

# 60,24의 최대공약수, 81,27의 최대공약수 구하기
# gcd(60,24)=gcd(24, 60%24)=gcd(24,12)=gcd(12, 24%12)=gcd(12,0)=12
# gcd(81,27)=gcd(27,81%27)=gcd(27,0)=27
# 두 수의 최대공약수를 구하기 위해서 다른 두 수의 최대공약수를 구하는 재귀호출
# 이 문제는 a,b의 최대공약수를 구하기 위해서 (a,b) 
# 보다 작은 숫자인 (b,a%b)의 재귀 호출 문제 (좀 더 작은 값으로 자기 자신 호출)
# 재귀호출의 종료 조건은 어떤 수와 0의 최대공약수는 자기 자신이라는 성질
# b가 0이면 재귀 호출을 멈추고 결과를 돌려 준다.
# 유클리드 최대 공약수 구하기
# 입력 : a,b
# 출력 : a,b의 최대공약수

def gcd(a,b):
    if b == 0:  # 종료 조건
        return a
    return gcd(b, a%b)
print(gcd(60,24))
print(gcd(81,27))