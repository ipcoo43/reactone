[ 함수로 집합 구하기 ]
def 함수이름(입력값):
  수행할 명령들
  return 출력값

# 함수 정의
def plus(a,b):  # 입력값 a,b를 받아서
  c = a + b     # a+b를 c에 저장하고
  return c      # 결과값 c를 돌려줘라
# 함수 사용
d=plus(10,17)   # 10,17에 대해 plus이라는 함수를 실행시키고 결과값을 d로 받아라
print(d)        # 27

[ union : 합집합 ]
def union(a,b): # 입력값 a,b를 받아서
  c = []        # 공집합 c를 만들어서
  for i in a:       # a의 원소 i에 대해서
    if i not in b:  # i가 b에 없으면
	   c.append(i)  # c에 i를 추가하라
  c = c + b         # b에 속하지 않는 a와 b를 더하라
  c.sort()
  return c          # 결과값을 c로 돌려줘라

a=[0,2,4]
b=[3,0,99]
d=union(a,b)    # a,b 리스트를 union이라는 함수를 실행시고 결과값을 d로 받아라
print(c)        # [0, 2, 3, 4, 99]

[ intersection : 교집합 ]
def intersection(a,b):
  c = []          # 공집합 c를 만들어서
  for i in a:     # a의 원소 i에 대해서
    if i in b:    # b가 i에 있으면
	  c.append(i) # c에 i를 추가하고
  c.sort()
  return c        # 결과값을 c로 돌려줘라

a=[1,3,4,5,6]
b=[2,4,6,3,0]
d=intersection(a,b)
print(d)           # [3, 4, 6]

[ complement : 차집합 ]
def complement(a,b):
  c = a+[]        # 공집합 c를 만들어서
  for i in b:     # b의 원소 i에 대해서
    if i in a:    # i가 b에 있으면
	  c.remove(i) # c에 i를 제거하라
  c.sort()
  return c
a=[1,3,4,5,6]
b=[2,4,6,3,0]
d=complement(a,b)
e=complement(a,b)
print(d)         # [1,5]
print(e)         # [0,2]

[ 합집합을 교집합, 차집합으로부터 구하기 ]
a ∪ b = (a-b)+(b-a) = a ∩ b
a=[1,3,4,5,6]
b=[2,4,6,3,0]
c=intersection(a,b)+complement(a,b)+complement(b,a)
c.sort()
print(c)  # [0, 1, 2, 3, 4, 5, 6]

[ 함수 정의 할 때 *를 붙이면 입력값 숫자에 제한이 없다 ]
def sum_all(*args): 
  total_sum = 0     # total_sum을 우선 0으로 만들고
  for i in args:    # args의 원소 i에 대해서
    total_sum = total_sum + i   # total_sum에다 i를 더하라
  return total_sum
print(sum_all(3,6,8))  # 18

# 여러개의 입력값으로부터 합집합 구하기
# list_a, list_b, list_c 로 부터 합집합을 구하려면 2번의 합집합이 필요하다
# n개의 입력값으로부터 합집합은 n-1번의 합집합이 필요하다.

def union_all(*lists):
  u=union(lists[0],lists[1])  # 처음은 list[0]과 list[1]의 합집합을 구하여 u라 정의하고
  for i in lists[2:]:  # list[2]부터의 원소 i에 대해서
    u = union(u,i)     # u와 i에 합집합을 구하여 u에 저장하고
	u.sort()
  return u

# 여러개의 입력값으로부터 교집합 구하기
# list_a, list_b, list_c 로 부터 교집합을 구하려면 2번의 교집합이 필요하다
# n개의 입력값으로부터 교집합은 n-1번의 교집합이 필요하다.

def intersection_all(*lists):
  d=intersection(lists[0],lists[1]) # 처음은 list[0]과 list[1]의 교집합을 구하여 d라 정의하고
  for i in lists[2]:    # list[2]로부터 원소 i에 대해서
    d=intersection(d,i) # d와 i에 합집합을 구하여 d에 저장하고
	d.sort()
  return d

a = [1,3,6,5,7]
b = [1,5,2,7,3]
c = [4,2,8,9,5]
e = union_all(a,b,c)
f = intersection_all(a,b,c)
print(e) # [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(f) # [5]
