# 탐색과 정렬
# 탐색 : 여러 개의 자료 중에서 원하는 것을 찾아내는 것
# 정렬 : 주어진 자료를 순서에 만춰 나열하는 것

# 순차 탐색
# 주어진 리스트에 특정한 값이 있는지 찾아 그 위치를 돌려주기
# 리스트에 찾는 값이 없다면 -1를 돌려준다.
# 리스트에 있는 첫 번째 자료부터 하나씩 비교하면서
# 같은 값이 나오면 그 위치를 결과로 돌려주고
# 리스트 끝까지 찾아도 같은 값이 나오지 않으면 -1을 돌려주면 된다.
# 리스트 안에 있는 원소를 하나씩 순차적으로 비교하면서 탐색한다
# 순차 탐색(sequential search) = 선형 탐색(linear search)

# [ 순차 탐색으로 특정 값의 위치 찾기 ]
# [17, 92, 18, 33, 58, 5, 33, 42]에서 
# 특정 값(18, 33, 900)을 찾아서 해당 위치 번호를 돌려주기

# 리스트에서 특정 숫자의 위치 찾기
# 입력 : 리스트 a, 찾는 값 x
# 출력 : 찾으면 그 값의 위치, 찾지 못하면 -1

def search_list(a,x):
    n = len(a) # 입력 크기 n
    for i in range(0,n): # 리스트 a의 모든 값을 차례로
        if x == a[i]:    # x 값과 비교하여 a[i] 같으면
            return i     # 위치를 돌려준다.
    return -1            # 끝까지 비교해도 없으면 -1을 돌려준다

v = [17, 92, 18, 33, 58, 7, 33, 42]
print(search_list(v,18)) # 2 (순서상 세 번째지만, 위치 번호는 2)
print(search_list(v,33)) # 3 ( 33은 두번 나오지만 처음 위치만 출력)
print(search_list(v,900)) # -1 (900은 리스트에 없음)

# 18을 순차 탐색하면
# 18을 17과 비교 (No) 0
# 18을 92과 비교 (No) 1
# 18을 17과 비교 (Yes Return 2)
# 찾으면 해당 위치 번호인 2를 return i로 돌려준다

# 900을 순차 탐색하면
# 끝까지 차례로 비교해도 없으므로 -1 (return -1)을 돌려준다.

# 계산 복잡도 : O(n)